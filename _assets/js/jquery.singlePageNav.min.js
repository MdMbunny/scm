/**
 * Single Page Nav Plugin
 * Copyright (c) 2013 Chris Wojcik <hello@chriswojcik.net>
 * Copyright (c) 2015 SCM <info@mdmbunny.com>
 * Dual licensed under MIT and GPL.
 * @author SCM after Chris Wojcik
 * @version 2.0.0
 */

// Utility
if( typeof Object.create !== 'function' ) {
    Object.create = function( obj ) {
        function F() {}
        F.prototype = obj;
        return new F();
    };
}

(function( $, window, document, undefined ) {
    "use strict";
    
    var SinglePageNav = {
        
        init: function( options, container ) {

            var self = this;
            
            self.options = $.extend( {}, $.fn.singlePageNav.defaults, options );
            
            self.container = container;            
            self.$container = $(container);
            self.$window = $( window );
            self.$body = $( 'body' );

            self.$links = [];
            self.$hash = [];
            self.$anchors = [];

            //console.log(self.$container);

            if( !self.options.data )
                self.$links = self.$body.find( 'a[href^="#"]' );
            else
                self.$links = self.$body.find( '[data-anchor]' );

            if ( self.options.filter !== '' )
                self.$links = self.$links.filter( self.options.filter );


            if( !self.$links.length )
                return;

            self.$links.each( function(){
                var hash, $anchors;
                if( !self.options.data ){
                    hash = $( this ).hash;
                }else{
                    hash = $( this ).data( 'anchor' );
                    //console.log(hash);
                }
                $anchors = self.$container.find( hash );
                if( $anchors.length ){
                    self.$anchors.push( $anchors );
                    self.$hash.push( $( this ) );
                }

            } );

            self.didScroll = true;
            self.setTimer();
        },
        
        setTimer: function() {
            var self = this;
            
            self.$window.on( 'scroll.singlePageNav', function() {
                self.didScroll = true;
            });
            
            self.checkPosition();
            self.timer = setInterval( function() {

                if ( self.didScroll ) {

                    self.didScroll = false;
                    self.checkPosition();

                }

            }, this.options.interval );
        },
        
        clearTimer: function() {
            var self = this;

            clearInterval( self.timer );
            self.$window.off( 'scroll.singlePageNav' );
            self.didScroll = false;

        },

        // Check the scroll position and set the active section
        checkPosition: function() {

            var self = this;

            var scrollPos = self.$window.scrollTop();
            self.setActiveClass( scrollPos );

        },
        
        setActiveClass: function( scrollPos ) {
            var coords, elem;

            var self = this;

            for( var i = 0; i < self.$anchors.length; i++ ) {

                var $anchor = self.$anchors[i];
                
                coords = {
                    top: Math.round( $anchor.offset().top ) - self.options.offset,
                    bottom: Math.round( $anchor.offset().top + $anchor.outerHeight() ) - self.options.offset
                };


                //console.log( coords.bottom );
                elem = $( self.$hash[i] ).parent();
                
                /*console.log($anchor.attr('id'));
                console.log(scrollPos);
                console.log(coords.bottom - self.options.threshold);
                console.log(scrollPos >= coords.top - self.options.threshold );
                console.log(scrollPos < coords.bottom - self.options.threshold );
                */
                
                if ( scrollPos >= coords.top - self.options.threshold && scrollPos < coords.bottom - self.options.threshold ) {
                    //console.log( hash );
                    $( elem ).addClass( self.options.currentClass );
                }else{
                    //var add = $( self.$links[i] ).parent();
                    //var remove = $( add ).siblings( '.' + self.options.currentClass );
                    $( elem ).removeClass( self.options.currentClass );
                }

            }

            if ( scrollPos + self.$window.height() >= self.$body.outerHeight() ) {

                elem = $( self.$hash[self.$hash.length-1] ).parent();
                $( self.$hash ).each( function(){
                    $( this ).parent().removeClass( self.options.currentClass );
                });
                $( elem ).addClass( self.options.currentClass );


                //console.log(  );

            }


        }
    };
    
    $.fn.singlePageNav = function( options ) {
        return this.each(function() {
            var singlePageNav = Object.create( SinglePageNav );
            singlePageNav.init( options, this );
        });
    };
    
    $.fn.singlePageNav.defaults = {
        data: 0,
        offset: 0,
        threshold: 120,
        currentClass: 'current',
        filter: '',
        interval: 250,
    };
    
})( jQuery, window, document );